// Code generated by jtd-codegen for Rust v0.2.1

use chrono::{DateTime, FixedOffset};
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
pub struct PostPublishedPostCurrentAuthorRole {
    #[serde(rename = "created_at")]
    pub createdAt: DateTime<FixedOffset>,

    #[serde(rename = "description")]
    pub description: String,

    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "updated_at")]
    pub updatedAt: DateTime<FixedOffset>,
}

#[derive(Serialize, Deserialize)]
pub struct PostPublishedPostCurrentAuthor {
    #[serde(rename = "accessibility")]
    pub accessibility: String,

    #[serde(rename = "created_at")]
    pub createdAt: DateTime<FixedOffset>,

    #[serde(rename = "email")]
    pub email: String,

    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "last_seen")]
    pub lastSeen: DateTime<FixedOffset>,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "roles")]
    pub roles: Vec<PostPublishedPostCurrentAuthorRole>,

    #[serde(rename = "slug")]
    pub slug: String,

    #[serde(rename = "status")]
    pub status: String,

    #[serde(rename = "updated_at")]
    pub updatedAt: DateTime<FixedOffset>,

    #[serde(rename = "url")]
    pub url: String,

    #[serde(rename = "bio")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bio: Option<Box<String>>,

    #[serde(rename = "cover_image")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub coverImage: Option<Box<String>>,

    #[serde(rename = "facebook")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub facebook: Option<Box<String>>,

    #[serde(rename = "location")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<String>>,

    #[serde(rename = "meta_description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metaDescription: Option<Box<String>>,

    #[serde(rename = "meta_title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metaTitle: Option<Box<String>>,

    #[serde(rename = "profile_image")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profileImage: Option<Box<String>>,

    #[serde(rename = "tour")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tour: Option<Box<String>>,

    #[serde(rename = "twitter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub twitter: Option<Box<String>>,

    #[serde(rename = "website")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub website: Option<Box<String>>,
}

#[derive(Serialize, Deserialize)]
pub struct PostPublishedPostCurrentPrimaryAuthorRole {
    #[serde(rename = "created_at")]
    pub createdAt: DateTime<FixedOffset>,

    #[serde(rename = "description")]
    pub description: String,

    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "updated_at")]
    pub updatedAt: DateTime<FixedOffset>,
}

#[derive(Serialize, Deserialize)]
pub struct PostPublishedPostCurrentPrimaryAuthor {
    #[serde(rename = "accessibility")]
    pub accessibility: String,

    #[serde(rename = "created_at")]
    pub createdAt: DateTime<FixedOffset>,

    #[serde(rename = "email")]
    pub email: String,

    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "last_seen")]
    pub lastSeen: DateTime<FixedOffset>,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "roles")]
    pub roles: Vec<PostPublishedPostCurrentPrimaryAuthorRole>,

    #[serde(rename = "slug")]
    pub slug: String,

    #[serde(rename = "status")]
    pub status: String,

    #[serde(rename = "updated_at")]
    pub updatedAt: DateTime<FixedOffset>,

    #[serde(rename = "url")]
    pub url: String,

    #[serde(rename = "bio")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bio: Option<Box<String>>,

    #[serde(rename = "cover_image")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub coverImage: Option<Box<String>>,

    #[serde(rename = "facebook")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub facebook: Option<Box<String>>,

    #[serde(rename = "location")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<String>>,

    #[serde(rename = "meta_description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metaDescription: Option<Box<String>>,

    #[serde(rename = "meta_title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metaTitle: Option<Box<String>>,

    #[serde(rename = "profile_image")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profileImage: Option<Box<String>>,

    #[serde(rename = "tour")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tour: Option<Box<String>>,

    #[serde(rename = "twitter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub twitter: Option<Box<String>>,

    #[serde(rename = "website")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub website: Option<Box<String>>,
}

#[derive(Serialize, Deserialize)]
pub struct PostPublishedPostCurrent {
    #[serde(rename = "authors")]
    pub authors: Vec<PostPublishedPostCurrentAuthor>,

    #[serde(rename = "comment_id")]
    pub commentId: String,

    #[serde(rename = "created_at")]
    pub createdAt: DateTime<FixedOffset>,

    #[serde(rename = "email_recipient_filter")]
    pub emailRecipientFilter: String,

    #[serde(rename = "excerpt")]
    pub excerpt: String,

    #[serde(rename = "featured")]
    pub featured: bool,

    #[serde(rename = "html")]
    pub html: String,

    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "mobiledoc")]
    pub mobiledoc: String,

    #[serde(rename = "plaintext")]
    pub plaintext: String,

    #[serde(rename = "primary_author")]
    pub primaryAuthor: PostPublishedPostCurrentPrimaryAuthor,

    #[serde(rename = "published_at")]
    pub publishedAt: DateTime<FixedOffset>,

    #[serde(rename = "reading_time")]
    pub readingTime: u8,

    #[serde(rename = "slug")]
    pub slug: String,

    #[serde(rename = "status")]
    pub status: String,

    #[serde(rename = "tags")]
    pub tags: Vec<String>,

    #[serde(rename = "title")]
    pub title: String,

    #[serde(rename = "updated_at")]
    pub updatedAt: DateTime<FixedOffset>,

    #[serde(rename = "url")]
    pub url: String,

    #[serde(rename = "uuid")]
    pub uuid: String,

    #[serde(rename = "visibility")]
    pub visibility: String,

    #[serde(rename = "canonical_url")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub canonicalUrl: Option<Box<String>>,

    #[serde(rename = "codeinjection_foot")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub codeinjectionFoot: Option<Box<String>>,

    #[serde(rename = "codeinjection_head")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub codeinjectionHead: Option<Box<String>>,

    #[serde(rename = "custom_excerpt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub customExcerpt: Option<Box<String>>,

    #[serde(rename = "custom_template")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub customTemplate: Option<Box<String>>,

    #[serde(rename = "email_subject")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub emailSubject: Option<Box<String>>,

    #[serde(rename = "feature_image")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub featureImage: Option<Box<String>>,

    #[serde(rename = "frontmatter")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub frontmatter: Option<Box<String>>,

    #[serde(rename = "meta_description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metaDescription: Option<Box<String>>,

    #[serde(rename = "meta_title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metaTitle: Option<Box<String>>,

    #[serde(rename = "og_description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ogDescription: Option<Box<String>>,

    #[serde(rename = "og_image")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ogImage: Option<Box<String>>,

    #[serde(rename = "og_title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ogTitle: Option<Box<String>>,

    #[serde(rename = "primary_tag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub primaryTag: Option<Box<String>>,

    #[serde(rename = "twitter_description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub twitterDescription: Option<Box<String>>,

    #[serde(rename = "twitter_image")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub twitterImage: Option<Box<String>>,

    #[serde(rename = "twitter_title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub twitterTitle: Option<Box<String>>,
}

#[derive(Serialize, Deserialize)]
pub struct PostPublishedPostPrevious {
    #[serde(rename = "status")]
    pub status: String,

    #[serde(rename = "updated_at")]
    pub updatedAt: DateTime<FixedOffset>,
}

#[derive(Serialize, Deserialize)]
pub struct PostPublishedPost {
    #[serde(rename = "current")]
    pub current: PostPublishedPostCurrent,

    #[serde(rename = "previous")]
    pub previous: PostPublishedPostPrevious,
}

#[derive(Serialize, Deserialize)]
pub struct PostPublished {
    #[serde(rename = "post")]
    pub post: PostPublishedPost,
}
